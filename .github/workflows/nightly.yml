name: Nightly Build

on:
  schedule:
    # Run nightly at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual triggering

jobs:
  nightly-build:
    name: Nightly Build (${{ matrix.name }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            executable: ternuino
          - os: windows-latest
            name: Windows
            executable: ternuino.exe
          - os: macos-latest
            name: macOS
            executable: ternuino
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Build Environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make valgrind
        
    - name: Setup Build Environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        gcc --version
        
    - name: Setup Build Environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          make
          
    - name: Build with Debug Info (Linux/macOS)
      if: matrix.os != 'windows-latest'
      working-directory: src
      run: |
        # Build with debug symbols for better testing
        make clean || true
        CFLAGS="-Wall -Wextra -std=c99 -g -O0 -Iinclude" make
        
    - name: Build with Debug Info (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: src
      shell: msys2 {0}
      run: |
        export PATH="/mingw64/bin:$PATH"
        
        # Use our GitHub Actions build script with debug flags
        echo "Building with GitHub Actions script (debug mode)..."
        cmd //c build-github-debug.bat
        
    - name: Extended Testing (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: src
      run: |
        echo "Running extended tests with Valgrind..."
        
        # Test each program with memory checking
        for program in programs/*.asm; do
          if [ -f "$program" ]; then
            echo "Testing $program with Valgrind..."
            timeout 30s valgrind --error-exitcode=1 --leak-check=full \
              "./build/${{ matrix.executable }}" "$program" || echo "Program $program completed"
          fi
        done
        
    - name: Extended Testing (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      working-directory: src
      shell: bash
      run: |
        echo "Running extended tests..."
        
        # Test each program
        for program in programs/*.asm; do
          if [ -f "$program" ]; then
            echo "Testing $program..."
            timeout 30s "./build/${{ matrix.executable }}" "$program" || echo "Program $program completed"
          fi
        done
        
    - name: Performance Benchmark
      working-directory: src
      shell: bash
      run: |
        echo "Running performance benchmark..."
        
        # Time the execution of fibonacci program multiple times
        echo "Benchmarking fibonacci_demo.asm (10 runs):"
        for i in {1..10}; do
          echo -n "Run $i: "
          time timeout 10s "./build/${{ matrix.executable }}" programs/fibonacci_demo.asm > /dev/null
        done
        
    - name: Upload Nightly Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nightly-${{ matrix.name }}-${{ github.sha }}
        path: |
          src/build/${{ matrix.executable }}
          src/programs/*.asm
        retention-days: 7  # Keep nightly builds for 1 week
        
  notify-status:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: nightly-build
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [ "${{ needs.nightly-build.result }}" == "success" ]; then
          echo "✅ Nightly build successful"
        else
          echo "❌ Nightly build failed"
          exit 1
        fi
