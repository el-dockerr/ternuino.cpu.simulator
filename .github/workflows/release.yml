name: Release

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0, v2.1.3, etc.

jobs:
  build-and-release:
    name: Build and Release ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            artifact: ternuino-linux
            executable: ternuino
          - os: windows-latest
            name: Windows  
            artifact: ternuino-windows.exe
            executable: ternuino.exe
          - os: macos-latest
            name: macOS
            artifact: ternuino-macos
            executable: ternuino
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Build Environment (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc make
        
    - name: Setup Build Environment (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        gcc --version
        
    - name: Setup Build Environment (Windows)
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          mingw-w64-x86_64-gcc
          mingw-w64-x86_64-make
          make
          
    - name: Build (Linux/macOS)
      if: matrix.os != 'windows-latest'
      working-directory: src
      run: |
        make clean || true
        make
        
    - name: Build (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: src
      shell: msys2 {0}
      run: |
        export PATH="/mingw64/bin:$PATH"
        gcc --version
        
        # Use our GitHub Actions build script which doesn't require make
        echo "Building with GitHub Actions script..."
        cmd //c build-github.bat
        
    - name: Test executable
      working-directory: src
      shell: bash
      run: |
        if [ -f "build/${{ matrix.executable }}" ]; then
          echo "✅ Executable built successfully: build/${{ matrix.executable }}"
          ls -la "build/${{ matrix.executable }}"
        else
          echo "❌ Executable not found!"
          exit 1
        fi
        
    - name: Prepare release asset
      working-directory: src
      shell: bash
      run: |
        # Copy and rename the executable to the desired asset name
        cp "build/${{ matrix.executable }}" "build/${{ matrix.artifact }}"
        ls -la build/
        
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v2
      with:
        files: src/build/${{ matrix.artifact }}
        body: |
          ## Ternuino CPU Simulator Release
          
          This release includes compiled binaries for Windows, Linux, and macOS.
          
          ### What's New
          - High-performance C implementation of the Ternuino CPU simulator
          - Full compatibility with existing assembly programs
          - Cross-platform support (Windows, Linux, macOS)
          - Interactive and command-line modes
          
          ### Downloads
          - **Windows**: `ternuino-windows.exe` - Requires no additional dependencies
          - **Linux**: `ternuino-linux` - Compiled for x86_64 Linux systems
          - **macOS**: `ternuino-macos` - Universal binary for Intel and Apple Silicon
          
          ### Usage
          ```bash
          # Run specific program
          ./ternuino programs/fibonacci_demo.asm
          
          # Interactive mode
          ./ternuino
          ```
          
          For full documentation, see the README.md file.
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
